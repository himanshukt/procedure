CREATE TABLE COURSE
(
	CCODE VARCHAR2(5) PRIMARY KEY,
	NAME VARCHAR2(30),
	DURATION NUMBER(3) CONSTRAINT CHK_COURSE_DURATION 	CHECK(DURATION>0),
	FEE NUMBER(5) CONSTRAINT CHK_COURSE_FEE CHECK(FEE>0),
	PREREQUISITE VARCHAR2(100)
);

CREATE TABLE FACULTY
(
	FACCODE VARCHAR2(5) PRIMARY KEY,
	NAME VARCHAR(30),
	QUAL VARCHAR2(30),
	EXP VARCHAR2(100)
);

CREATE TABLE COURSEFACULTY
(
	FACCODE VARCHAR2(5) references faculty(faccode),
	CCODE VARCHAR2(5) references course(ccode),
	GRADE CHAR(1) CONSTRAINT CHK_COURSEFACULTY_GRADE 
	CHECK ( GRADE IN('A','B','C')),
	PRIMARY KEY(FACCODE,CCODE)
);

CREATE TABLE BATCH
(
	BCODE VARCHAR2(5) PRIMARY KEY,
	CCODE VARCHAR2(5),
	FACCODE VARCHAR2(5),
	STDATE DATE,
	ENDDATE DATE,
	TIMING NUMBER(1) CONSTRAINT CHK_BATCH_TIMING CHECK (TIMING IN(1,2,3)),
	CONSTRAINT FK_BATCH_CCODE FOREIGN KEY(CCODE) 
	REFERENCES COURSE(CCODE),
	CONSTRAINT FK_BATCH_FACCODE FOREIGN KEY(FACCODE) 
	REFERENCES FACULTY(FACCODE),
	CONSTRAINT CHK_BATCH_ENDDATE
	CHECK((ENDDATE-STDATE)>0)
);

CREATE TABLE STUDENT
(
	ROLLNO NUMBER(5) PRIMARY KEY,
	BCODE VARCHAR2(5),
	NAME VARCHAR2(30),
	GENDER CHAR(1) CONSTRAINT CHK_STUDENT_GENDER CHECK (GENDER IN('m','f')),
	DJ DATE,
	PHONE VARCHAR2(10),
	EMAIL VARCHAR(30),
	CONSTRAINT FK_STUDENT_BCODE FOREIGN KEY (BCODE) 
	REFERENCES BATCH(BCODE)
);

CREATE TABLE PAYMENTS
(
	ROLLNO NUMBER(5),
	DP DATE,
	AMOUNT NUMBER(5)
);



select next_day(sysdate-to_char(sysdate,'DD'),'friday' ) as first_friday,

next_day(sysdate-to_char(sysdate,'DD')+7,'friday' ) as second_friday ,

next_day(sysdate-to_char(sysdate,'DD')+14,'friday' ) as third_friday ,

next_day(sysdate-to_char(sysdate,'DD')+21,'friday' ) as forth_friday ,

case when next_day(sysdate-to_char(sysdate,'DD')+28,'friday')>last_day(sysdate) then '' else 
to_char(next_day(sysdate-to_char(sysdate,'DD')+28,'friday')) end "fifth friday"  from dual;